/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

const PATH = "/3d/avatars-test/1119.glb";

import React, { useRef, useEffect } from "react";
import { useGLTF } from "@react-three/drei";
import { useFrame } from "@react-three/fiber";
import { MathUtils } from "three";

import useBlink from "../utils/useBlink";
import useViseme from "../utils/useViseme";
import { VISME_TO_MORPHTARGET_MAP } from "../utils/constant";

export default function Model({
  position = [0, 0, 0],
  scale = [1, 1, 1],
  rotation = [0, 0, 0],
  materialColor = "#ffffff",
  metalness = 0.5,
  roughness = 0.5,
  ...props
}) {
  const group = useRef();
  const { nodes, materials } = useGLTF(PATH);
  const { visemeMessage } = useViseme();
  const { blink } = useBlink();

  // LERP MORPH TARGET
  const lerpMorphTarget = (target, value, speed = 0.1) => {
    group.current?.traverse((child) => {
      // console.log(child, child.isSkinnedMesh, child.morphTargetDictionary);
      if (child.isSkinnedMesh && child.morphTargetDictionary) {
        // console.log(child, child.isSkinnedMesh, child.morphTargetDictionary);
        const index = child.morphTargetDictionary[target];
        if (
          index === undefined ||
          child.morphTargetInfluences[index] === undefined
        ) {
          return;
        }
        child.morphTargetInfluences[index] = MathUtils.lerp(
          child.morphTargetInfluences[index],
          value,
          speed
        );
      }
    });
  };

  // Handle visemes and blinking
  useFrame(() => {
    // Smile
    lerpMorphTarget("mouthSmile", 0.5, 0.2);
    // Blinking
    lerpMorphTarget("eyeBlinkLeft", blink ? 1 : 0, 0.2);
    lerpMorphTarget("eyeBlinkRight", blink ? 1 : 0, 0.2);

    const appliedMorphTargets = [];
    if (visemeMessage && visemeMessage.visemes && visemeMessage.audioPlayer) {
      const currentTime = visemeMessage.audioPlayer.currentTime * 1000;

      for (let i = visemeMessage.visemes.length - 1; i >= 0; i--) {
        const [visemeTime, visemeId] = visemeMessage.visemes[i];
        if (currentTime >= visemeTime) {
          const targetMorph = VISME_TO_MORPHTARGET_MAP[visemeId];
          if (targetMorph) {
            appliedMorphTargets.push(targetMorph);
            lerpMorphTarget(targetMorph, 1, 0.2);
          }
          break;
        }
      }
    }

    // Reset unused morph targets
    Object.values(VISME_TO_MORPHTARGET_MAP).forEach((value) => {
      if (appliedMorphTargets.includes(value)) return;
      lerpMorphTarget(value, 0, 0.15);
    });
  });

  return (
    <group
      ref={group}
      position={position}
      scale={scale}
      rotation={rotation}
      {...props}
      dispose={null}
    >
      <group {...props} dispose={null}>
        <group scale={0.008}>
          <mesh
            name="Droide_de_seguridad_Star_Wars_KX001"
            castShadow
            receiveShadow
            geometry={nodes.Droide_de_seguridad_Star_Wars_KX001.geometry}
            material={materials["Body.001"]}
            morphTargetDictionary={
              nodes.Droide_de_seguridad_Star_Wars_KX001.morphTargetDictionary
            }
            morphTargetInfluences={
              nodes.Droide_de_seguridad_Star_Wars_KX001.morphTargetInfluences
            }
          />
          <mesh
            name="Droide_de_seguridad_Star_Wars_KX001_1"
            castShadow
            receiveShadow
            geometry={nodes.Droide_de_seguridad_Star_Wars_KX001_1.geometry}
            material={materials["Head.001"]}
            morphTargetDictionary={
              nodes.Droide_de_seguridad_Star_Wars_KX001_1.morphTargetDictionary
            }
            morphTargetInfluences={
              nodes.Droide_de_seguridad_Star_Wars_KX001_1.morphTargetInfluences
            }
          />
          <mesh
            name="Droide_de_seguridad_Star_Wars_KX001_2"
            castShadow
            receiveShadow
            geometry={nodes.Droide_de_seguridad_Star_Wars_KX001_2.geometry}
            material={materials["Misc.001"]}
            morphTargetDictionary={
              nodes.Droide_de_seguridad_Star_Wars_KX001_2.morphTargetDictionary
            }
            morphTargetInfluences={
              nodes.Droide_de_seguridad_Star_Wars_KX001_2.morphTargetInfluences
            }
          />
        </group>
        <group position={[-0.003, -0.004, 0.084]}>
          <skinnedMesh
            name="EyeLeft"
            geometry={nodes.EyeLeft.geometry}
            material={materials.Wolf3D_Eye}
            skeleton={nodes.EyeLeft.skeleton}
            morphTargetDictionary={nodes.EyeLeft.morphTargetDictionary}
            morphTargetInfluences={nodes.EyeLeft.morphTargetInfluences}
          />
          <skinnedMesh
            name="EyeRight"
            geometry={nodes.EyeRight.geometry}
            material={materials.Wolf3D_Eye}
            skeleton={nodes.EyeRight.skeleton}
            morphTargetDictionary={nodes.EyeRight.morphTargetDictionary}
            morphTargetInfluences={nodes.EyeRight.morphTargetInfluences}
          />
          <skinnedMesh
            name="Wolf3D_Head"
            geometry={nodes.Wolf3D_Head.geometry}
            material={materials.Wolf3D_Skin}
            skeleton={nodes.Wolf3D_Head.skeleton}
            morphTargetDictionary={nodes.Wolf3D_Head.morphTargetDictionary}
            morphTargetInfluences={nodes.Wolf3D_Head.morphTargetInfluences}
          />
          <skinnedMesh
            name="Wolf3D_Teeth"
            geometry={nodes.Wolf3D_Teeth.geometry}
            material={materials.Wolf3D_Teeth}
            skeleton={nodes.Wolf3D_Teeth.skeleton}
            morphTargetDictionary={nodes.Wolf3D_Teeth.morphTargetDictionary}
            morphTargetInfluences={nodes.Wolf3D_Teeth.morphTargetInfluences}
          />
          <primitive object={nodes.Hips} />
        </group>
      </group>
    </group>
  );
}

useGLTF.preload(PATH);
